version: '3.8'

services:
  web:
    build: .
    container_name: core
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    command: python manage.py runserver 0.0.0.0:8000

  db:
    image: postgres:latest
    container_name: postgres
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s
    ports:
      - "6379:6379"
    restart: always

  bot:
    build:
      context: .
    container_name: telegram-bot
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    command: python bot/tg_bot.py

  avito_chrome_driver:
    image: selenium/standalone-chrome:latest
    container_name: avito_chrome_driver
    ports:
      - "4445:4444"
    environment:
      - SE_NODE_MAX_INSTANCES=1
      - SE_NODE_MAX_SESSIONS=2
    shm_size: 2gb
    restart: always
  
  autoru_chrome_driver:
      image: selenium/standalone-chrome:latest
      container_name: autoru_chrome_driver
      ports:
        - "4446:4444"
      environment:
        - SE_NODE_MAX_INSTANCES=1
        - SE_NODE_MAX_SESSIONS=2
      shm_size: 2gb
      restart: always
  
  drom_chrome_driver:
    image: selenium/standalone-chrome:latest
    container_name: drom_chrome_driver
    ports:
      - "4447:4444"
    environment:
      - SE_NODE_MAX_INSTANCES=1
      - SE_NODE_MAX_SESSIONS=2
    shm_size: 2gb
    restart: always

  avito-parser:
    build:
      context: .
    container_name: avito-parser
    depends_on:
      - avito_chrome_driver
      - redis
      - db
    volumes:
      - .:/app
    command: sh -c "sleep 10 && python parsers/avito_manager.py"  # Добавлена задержка перед запуском скрипта
    restart: always
    healthcheck:
      test: ["CMD", "python", "parsers/avito_manager.py", "--check"]
      interval: 30s
      retries: 3
      start_period: 30s

  autoru-parser:
    build:
      context: .
    container_name: autoru-parser
    depends_on:
      - autoru_chrome_driver
      - redis
      - db
    volumes:
      - .:/app
    command: sh -c "sleep 10 && python parsers/autoru_manager.py"  # Добавлена задержка перед запуском скрипта
    restart: always
    healthcheck:
      test: ["CMD", "python", "parsers/autoru_manager.py", "--check"]
      interval: 30s
      retries: 3
      start_period: 30s

  drom-parser:
    build:
      context: .
    container_name: drom-parser
    depends_on:
      - drom_chrome_driver
      - redis
      - db
    volumes:
      - .:/app
    command: sh -c "sleep 10 && python parsers/drom_manager.py"  # Добавлена задержка перед запуском скрипта
    restart: always
    healthcheck:
      test: ["CMD", "python", "parsers/drom_manager.py", "--check"]
      interval: 30s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  redis_data:
