import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
os.environ.update({'DJANGO_ALLOW_ASYNC_UNSAFE': "true"})

import django
django.setup()

import asyncio
import json
import redis.asyncio as redis
from aiogram import Bot
from aiogram.exceptions import TelegramForbiddenError, TelegramRetryAfter
from asgiref.sync import sync_to_async
from django.db import close_old_connections

from users.models import UserFilters, User  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π —Å–≤–æ—é –º–æ–¥–µ–ª—å
from utils import check_filters  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
from config import REDIS_HOST, REDIS_PORT
from services.remove_user_service import remove_user_from_db

import logging


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot_logs.log', mode='a')
    ]
)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = Bot(token=TOKEN)


async def get_all_ads(redis_client: redis.Redis):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ Redis."""
    ad_keys = await redis_client.keys("*")
    ads = {}
    for ad_id in ad_keys:
        key_type = await redis_client.type(ad_id)
        if key_type != "string":
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏
        ad_data = await redis_client.get(ad_id)
        if ad_data:
            try:
                ads[ad_id] = ad_data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
            except json.JSONDecodeError:
                logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad_id}")
    return ads


async def send_ads_by_filters(redis_client: redis.Redis):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ –∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º."""
    ads = await get_all_ads(redis_client)
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    if not ads:
        return

    users_monitoring_enabled = await sync_to_async(list)(User.objects.filter(monitoring_enabled=True))
    users = await sync_to_async(list)(UserFilters.objects.all())
    checked_ads = await redis_client.smembers("ads:checked")

    for ad_id, ad_data in ads.items():
        if ad_id in checked_ads:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ

        ad = json.loads(ad_data)
        for user in users:
            if user.user_id in [u.user_id for u in users_monitoring_enabled]:
                filters = {
                    "platform": user.platform,
                    "price": user.price,
                    "brand": user.brand,
                    "engine": user.engine,
                    "mileage": user.mileage,
                    "gearbox": user.gearbox,
                    "owners": user.owners,
                    "condition": user.condition,
                    "seller": user.seller,
                    "city": user.city,
                    "year": user.year,
                    "body_type": user.body_type,
                    "color": user.color,
                    "drive": user.drive,
                    "steering": user.steering,
                    "ad_type": user.ad_type,
                }
                if check_filters(ad, filters):
                    await send_ad_to_user(user.user_id, ad)
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}")

        # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ "–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ"
        await redis_client.sadd("ads:checked", ad_id)


import logging

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è MarkdownV2
def escape_md_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, —Ç—Ä–µ–±—É–µ–º—ã–µ MarkdownV2.
    –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤: _ * [ ] ( ) ~ ` > # + - = | { } . !
    """
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for ch in special_chars:
        text = text.replace(ch, f"\\{ch}")
    return text

def bold_md(text: str) -> str:
    """–û—Ñ–æ—Ä–º–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ –∂–∏—Ä–Ω—ã–π (MarkdownV2)."""
    return f"*{text}*"

def italic_md(text: str) -> str:
    """–û—Ñ–æ—Ä–º–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫—É—Ä—Å–∏–≤ (MarkdownV2)."""
    return f"_{text}_"

def link_md(title: str, url: str) -> str:
    """–û—Ñ–æ—Ä–º–ª—è–µ—Ç —Å—Å—ã–ª–∫—É (MarkdownV2)."""
    return f"[{title}]({url})"

async def send_ad_to_user(user_id, ad):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ,
    –∑–∞—Ç–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–π bold_md, italic_md –∏ link_md.
    """
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
    name = escape_md_v2(ad.get('name', '').title())
    year = escape_md_v2(str(ad.get('year', '')))
    ad_link = escape_md_v2(ad.get('link', ''))
    price = escape_md_v2(str(ad.get('price', '')))
    city = escape_md_v2(ad.get('city', '').title())
    brand = escape_md_v2(ad.get('brand', '').title())
    model = escape_md_v2(ad.get('model', '').title())
    engine = escape_md_v2(ad.get('engine', ''))
    mileage = escape_md_v2(str(ad.get('mileage', '')))
    gearbox = escape_md_v2(ad.get('gearbox', ''))
    drive = escape_md_v2(ad.get('drive', ''))
    steering = escape_md_v2(ad.get('steering', ''))
    body_type = escape_md_v2(ad.get('body_type', ''))
    color = escape_md_v2(ad.get('color', ''))
    owners = escape_md_v2(str(ad.get('owners', '')))
    condition = escape_md_v2(ad.get('condition', ''))
    seller = escape_md_v2(ad.get('seller', ''))
    ad_type = escape_md_v2(ad.get('ad_type', ''))
    platform = escape_md_v2(ad.get('platform', ''))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º MarkdownV2
    text_msg = (
        f"{bold_md(name)}\n\n"
        f"{bold_md('üí∞ –¶–µ–Ω–∞:')} {price} ‚ÇΩ\n"
        f"{bold_md('üìç –ì–æ—Ä–æ–¥:')} {city}\n"
        f"{bold_md('üöó –ú–∞—Ä–∫–∞:')} {brand}\n"
        f"{bold_md('üöó –ú–æ–¥–µ–ª—å:')} {model}\n"
        f"{bold_md('üìÖ –ì–æ–¥:')} {year}\n"
        f"{bold_md('üì± –ü–ª–æ—â–∞–¥–∫–∞:')} {platform}\n\n"
        f"{bold_md('üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:')}\n"
        f"{italic_md('‚õΩ –î–≤–∏–≥–∞—Ç–µ–ª—å:')} {engine}\n"
        f"{italic_md('üìè –ü—Ä–æ–±–µ–≥:')} {mileage} –∫–º\n"
        f"{italic_md('‚öôÔ∏è –ö–æ—Ä–æ–±–∫–∞:')} {gearbox}\n"
        f"{italic_md('üîß –ü—Ä–∏–≤–æ–¥:')} {drive}\n"
        f"{italic_md('üöó –†—É–ª—å:')} {steering}\n"
        f"{italic_md('üè∑ –¢–∏–ø –∫—É–∑–æ–≤–∞:')} {body_type}\n"
        f"{italic_md('üé® –¶–≤–µ—Ç:')} {color}\n"
        f"{italic_md('üë§ –í–ª–∞–¥–µ–ª—å—Ü–µ–≤:')} {owners}\n"
        f"{italic_md('üè∑ –°–æ—Å—Ç–æ—è–Ω–∏–µ:')} {condition}\n\n"
        f"{bold_md('üè¢ –ü—Ä–æ–¥–∞–≤–µ—Ü:')} {seller}\n"
        f"{bold_md('üìú –¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:')} {ad_type}\n\n"
        f"{link_md('–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', ad_link)}\n"
    )

    try:
        await bot.send_photo(chat_id=user_id, photo=ad["image"], caption=text_msg, parse_mode="MarkdownV2")
        asyncio.sleep(0.5)
    except TelegramForbiddenError:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –£–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –±–∞–∑—ã.")
        await remove_user_from_db(user_id)  # –£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –ø–æ–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except TelegramRetryAfter as e:
        logging.error(f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API: –æ–∂–∏–¥–∞–Ω–∏–µ {e.retry_after} —Å–µ–∫.")
        await asyncio.sleep(e.retry_after)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {ad}")
        await bot.send_message(chat_id=user_id, text=text_msg, parse_mode="MarkdownV2")



async def main():
    redis_client = await redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)
    while True:
        await send_ads_by_filters(redis_client)
        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥–µ–º 30 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(30)
        close_old_connections()

if __name__ == "__main__":
    asyncio.run(main())
    logging.info("Ads sender is running...")
