import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
os.environ.update({'DJANGO_ALLOW_ASYNC_UNSAFE': "true"})

import django
django.setup()

import asyncio
import json
import redis.asyncio as redis
from aiogram import Bot
from asgiref.sync import sync_to_async
from django.db import close_old_connections

from users.models import UserFilters, User  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π —Å–≤–æ—é –º–æ–¥–µ–ª—å
from utils import check_filters  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
from config import REDIS_HOST, REDIS_PORT


import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot_logs.log', mode='a')  # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª 'bot_logs.log'
    ]
)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = Bot(token=TOKEN)


async def get_all_ads(redis_client: redis.Redis):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ Redis."""
    ad_keys = await redis_client.keys("*")  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
    ads = {}

    for ad_id in ad_keys:
        key_type = await redis_client.type(ad_id)
        if key_type != "string":
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏
        ad_data = await redis_client.get(ad_id)  # –ü–æ–ª—É—á–∞–µ–º JSON –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if ad_data:
            try:
                ads[ad_id] = ad_data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å, –Ω–µ –ø–∞—Ä—Å–∏–º –≤ json –ø–æ–∫–∞
            except json.JSONDecodeError:
                print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad_id}")
    
    return ads


async def send_ads_by_filters(redis_client: redis.Redis):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ –∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º."""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ Redis
    ads = await get_all_ads(redis_client)
    logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    if not ads:
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    users_monitoring_enabled = await sync_to_async(list)(User.objects.filter(monitoring_enabled=True))
    
    users = await sync_to_async(list)(UserFilters.objects.all())

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–±–æ—Ä –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    checked_ads = await redis_client.smembers("ads:checked")  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

    for ad_id, ad_data in ads.items():
        if ad_id in checked_ads:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ

        ad = json.loads(ad_data)  # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ json

        for user in users:
            if user.user_id in [u.user_id for u in users_monitoring_enabled]:
                filters = {
                    "platform": user.platform,
                    "price": user.price,
                    "brand": user.brand,
                    "engine": user.engine,
                    "mileage": user.mileage,
                    "gearbox": user.gearbox,
                    "owners": user.owners,
                    "condition": user.condition,
                    "seller": user.seller,
                    "city": user.city,
                    "year": user.year,
                    "body_type": user.body_type,
                    "color": user.color,
                    "drive": user.drive,
                    "steering": user.steering,
                    "ad_type": user.ad_type,
                }

                if check_filters(ad, filters):
                    await send_ad_to_user(user.user_id, ad)
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}")

        # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ "–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ"
        await redis_client.sadd("ads:checked", ad_id)


async def send_ad_to_user(user_id, ad):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    text = (
        f" [{ad['name'].title()} ({ad['year']})]({ad['link']})\n\n"
        f"üí∞ *–¶–µ–Ω–∞:* {ad['price']} ‚ÇΩ\n"
        f"üìç *–ì–æ—Ä–æ–¥:* {ad['city'].title()}\n"
        f"üöó *–ú–∞—Ä–∫–∞:* {ad['brand'].title()}\n"
        f"üöó *–ú–æ–¥–µ–ª—å:* {ad['model'].title()}\n"
        f"üìÖ *–ì–æ–¥:* {ad['year']}\n"
        f"üì± *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* {ad['platform']}\n\n"
        
        f"üîß *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
        f"‚õΩ _–î–≤–∏–≥–∞—Ç–µ–ª—å: {ad['engine']}_\n"
        f"üìè _–ü—Ä–æ–±–µ–≥: {ad['mileage']} –∫–º_\n"
        f"‚öôÔ∏è _–ö–æ—Ä–æ–±–∫–∞: {ad['gearbox']}_\n"
        f"üîß _–ü—Ä–∏–≤–æ–¥: {ad['drive']}_\n"
        f"üöó _–†—É–ª—å: {ad['steering']}_\n"
        f"üè∑ _–¢–∏–ø –∫—É–∑–æ–≤–∞: {ad['body_type']}_\n"
        f"üé® _–¶–≤–µ—Ç: {ad['color']}_\n"
        f"üë§ _–í–ª–∞–¥–µ–ª—å—Ü–µ–≤: {ad['owners']}_\n"
        f"üè∑ _–°–æ—Å—Ç–æ—è–Ω–∏–µ: {ad['condition']}_\n\n"
        
        f"üè¢ *–ü—Ä–æ–¥–∞–≤–µ—Ü:* {ad['seller']}\n"
        f"üìú *–¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:* {ad['ad_type']}\n"
        # f"üîó *–°—Å—ã–ª–∫–∞:* {ad['link'].replace('_', r'\_')}"
    )

    try:
        await bot.send_photo(chat_id=user_id, photo=ad["image"], caption=text, parse_mode="Markdown")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ photo –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {ad}")
        await bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown")

async def main():
    redis_client = await redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)

    while True:
        await send_ads_by_filters(redis_client)
        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥–µ–º 30 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        close_old_connections()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î

if __name__ == "__main__":
    asyncio.run(main())
    logging.info("Ads sender is running...")
